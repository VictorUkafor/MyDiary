{"version":3,"sources":["../../../../server/models/queries/index.js"],"names":["getAUser","req","client","query","body","email","trim","getAUserById","user","user_id","getAnEntry","params","entryId","searchEntriesWithPag","page","search","searchEntries","getAllEntries","getEntriesWithPag","insertUser","salt","bcrypt","photo","files","photograph","name","firstName","lastName","hashSync","password","insertEntry","title","content","updateEntry","date","entry","entry_id","deleteEntry","schema","url","pg","connectionString","Client","connect","queries","err","message","end","beforeQueriesForEntries","beforeQueryForUser"],"mappings":"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","file":"index.js","sourcesContent":["const getAUser = req => req.client.query(\n  'SELECT * FROM account WHERE email=($1);',\n  [req.body.email.trim()]\n);\n\n\nconst getAUserById = (req, user) => req.client.query(\n  'SELECT * FROM account WHERE user_id=($1)',\n  [user.user_id]\n);\n\n\nconst getAnEntry = req => req.client.query(`SELECT * FROM entry WHERE entry_id=($1)\n  AND entry_user_id=($2);`, [req.params.entryId, req.user.user_id]);\n\n\nconst searchEntriesWithPag = (req, page) => {\n  const search = `%${req.body.search.trim()}%`;\n  return req.client.query(\n    `SELECT * FROM entry WHERE entry_user_id=($1) AND title LIKE ($2)\n    OR content LIKE ($2) ORDER BY entry_id DESC LIMIT 5 OFFSET ($3);`,\n    [req.user.user_id, search, (page - 1) * 5]\n  );\n};\n\n\nconst searchEntries = (req) => {\n  const search = `%${req.body.search.trim()}%`;\n  return req.client.query(`SELECT * FROM entry WHERE entry_user_id=($1) AND title LIKE ($2)\n    OR content LIKE ($2) ORDER BY entry_id DESC;`, [req.user.user_id, search]);\n};\n\n\nconst getAllEntries = req => req.client.query(\n  'SELECT * FROM entry WHERE entry_user_id=($1) ORDER BY entry_id DESC;',\n  [req.user.user_id]\n);\n\n\nconst getEntriesWithPag = (req, page) => req.client.query(\n  `SELECT * FROM entry WHERE entry_user_id=($1)\n        ORDER BY entry_id DESC LIMIT 5 OFFSET ($2);`,\n  [req.user.user_id, (page - 1) * 5]\n);\n\n\nconst insertUser = (req, salt, bcrypt) => {\n  let photo = '';\n  if (req.files) { photo = req.files.photograph.name; }\n  return req.client.query(\n    `INSERT INTO account(firstName, lastName, email, password,\n    photograph) values($1, $2, $3, $4, $5) RETURNING *`,\n    [req.body.firstName.trim(), req.body.lastName.trim(), req.body.email.trim(),\n      bcrypt.hashSync(req.body.password.trim(), salt), photo]\n  );\n};\n\n\nconst insertEntry = (req, title, content) => req.client.query(`INSERT INTO entry(entry_user_id, title, content)\n  values($1, $2, $3) RETURNING *`, [req.user.user_id, title, content]);\n\n\nconst updateEntry = (req, title, content, date) => req.client.query(`UPDATE entry SET title=($1), content=($2), updated_at=($3)\n  WHERE entry_id=($4) RETURNING *`, [title, content, date, req.entry.entry_id]);\n\n\nconst deleteEntry = req => req.client.query('DELETE FROM entry WHERE entry_id=($1) RETURNING *', [req.entry.entry_id]);\n\n\nconst schema = (url, pg) => {\n  const connectionString = url;\n  const client = new pg.Client(connectionString);\n  client.connect();\n\n  const queries = `CREATE TABLE IF NOT EXISTS account(\n  user_id SERIAL PRIMARY KEY, \n  firstName VARCHAR(255) NOT NULL,\n  lastName VARCHAR(255) NOT NULL,\n  email VARCHAR(255) UNIQUE NOT NULL,\n  password VARCHAR(255) NOT NULL,\n  photograph VARCHAR(255),\n  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW());\n\n  CREATE TABLE IF NOT EXISTS entry(\n  entry_id SERIAL PRIMARY KEY,\n  entry_user_id INTEGER NOT NULL,\n  title VARCHAR(255) NOT NULL,\n  content text NOT NULL,\n  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n  FOREIGN KEY (entry_user_id) REFERENCES account (user_id));\n  `;\n\n  client.query(queries, (err) => {\n    if (err) {\n      return err.message;\n    }\n    client.end();\n  });\n};\n\n\nconst beforeQueriesForEntries = (client, password) => {\n  const queries = `\n  DROP TABLE IF EXISTS account CASCADE;\n  \n  DROP TABLE IF EXISTS entry CASCADE;\n  \n  CREATE TABLE IF NOT EXISTS account (\n    user_id SERIAL PRIMARY KEY, \n    firstName VARCHAR(255) NOT NULL,\n    lastName VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    photograph VARCHAR(255),\n    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW() );\n    \n    CREATE TABLE IF NOT EXISTS entry (\n      entry_id SERIAL PRIMARY KEY,\n      entry_user_id INTEGER NOT NULL,\n      title VARCHAR(255) NOT NULL,\n      content text NOT NULL,\n      created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n      updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n      FOREIGN KEY (entry_user_id) REFERENCES account (user_id) );\n      \n      INSERT INTO account (firstName, lastName, email,\n      password) values('Kenny', 'Andrew', 'kenandrew@gmail.com', '${password}' );\n      \n      INSERT INTO entry (entry_user_id, title, content) values \n      ('1', 'It all started when', 'It all started when I was still  . . .' );`;\n\n  client.query(queries, (err) => {\n    if (err) {\n      return err.message;\n    }\n    client.end();\n  });\n};\n\nconst beforeQueryForUser = (client) => {\n  const query = 'TRUNCATE TABLE account CASCADE';\n  client.query(query, (err) => {\n    if (err) {\n      return err.message;\n    }\n    client.end();\n  });\n};\n\n\nconst queries = {\n  getAllEntries,\n  getEntriesWithPag,\n  insertUser,\n  insertEntry,\n  getAUser,\n  getAUserById,\n  getAnEntry,\n  updateEntry,\n  deleteEntry,\n  searchEntries,\n  searchEntriesWithPag,\n  schema,\n  beforeQueriesForEntries,\n  beforeQueryForUser\n};\n\n\nexport default queries;\n"]}