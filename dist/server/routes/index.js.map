{"version":3,"sources":["../../../server/routes/index.js"],"names":["process","env","apiRouter","express","Router","user","UserController","jwt","bcrypt","queries","entry","EntryController","databaseMiddleware","DatabaseMiddleware","pg","userMiddleware","UserMidddleware","entryMiddleware","EntryMiddleware","get","req","res","status","send","message","post","checksForSignUpRequiredFields","checksIfPhotoIsUploaded","handlesConnectionToTheDatabase","checksIfUserAlreadyExist","postUser","checksForLogInRequiredFields","checksIfUserExist","loginUser","checksIfUserIsAuthenticated","getAUser","getAllEntries","searchEntries","checksIfEntryExist","getEntry","checksForAddEntryRequiredFields","postEntry","put","checksIfEntryCanBeUpdated","putEntry","deleteEntry"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;eAEgBA,O;IAARC,G,YAAAA,G;;AACR,IAAMC,YAAYC,qBAAQC,MAAR,EAAlB;AACA,IAAMC,OAAO,IAAIC,kBAAJ,CAAmBC,yBAAnB,EAAwBC,mBAAxB,EAAgCP,GAAhC,EAAqCQ,oBAArC,CAAb;AACA,IAAMC,QAAQ,IAAIC,oBAAJ,CAAoBF,oBAApB,CAAd;AACA,IAAMG,qBAAqB,IAAIC,gCAAJ,CAAuBC,eAAvB,EAA2Bb,GAA3B,CAA3B;AACA,IAAMc,iBAAiB,IAAIC,4BAAJ,CAAoBT,yBAApB,EAAyBN,GAAzB,EAA8BQ,oBAA9B,CAAvB;AACA,IAAMQ,kBAAkB,IAAIC,6BAAJ,CAAoBT,oBAApB,CAAxB;;AAEAP,UAAUiB,GAAV,CAAc,GAAd,EAAmB,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcA,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpDC,aAAS;AAD2C,GAArB,CAAd;AAAA,CAAnB;;AAKAtB,UAAUuB,IAAV,CACE,cADF,EAEEV,eAAeW,6BAFjB,EAGEX,eAAeY,uBAHjB,EAIEf,mBAAmBgB,8BAJrB,EAKEb,eAAec,wBALjB,EAMExB,KAAKyB,QANP;;AASA5B,UAAUuB,IAAV,CACE,aADF,EAEEV,eAAegB,4BAFjB,EAGEnB,mBAAmBgB,8BAHrB,EAIEb,eAAeiB,iBAJjB,EAKE3B,KAAK4B,SALP;;AAQA/B,UAAUiB,GAAV,CACE,OADF,EAEEP,mBAAmBgB,8BAFrB,EAGEb,eAAemB,2BAHjB,EAIE7B,KAAK8B,QAJP;;AAOAjC,UAAUiB,GAAV,CACE,UADF,EAEEP,mBAAmBgB,8BAFrB,EAGEb,eAAemB,2BAHjB,EAIExB,MAAM0B,aAJR;;AAOAlC,UAAUuB,IAAV,CACE,iBADF,EAEEb,mBAAmBgB,8BAFrB,EAGEb,eAAemB,2BAHjB,EAIExB,MAAM2B,aAJR;;AAOAnC,UAAUiB,GAAV,CACE,mBADF,EAEEP,mBAAmBgB,8BAFrB,EAGEb,eAAemB,2BAHjB,EAIEjB,gBAAgBqB,kBAJlB,EAKE5B,MAAM6B,QALR;;AAQArC,UAAUuB,IAAV,CACE,UADF,EAEEb,mBAAmBgB,8BAFrB,EAGEX,gBAAgBuB,+BAHlB,EAIEzB,eAAemB,2BAJjB,EAKExB,MAAM+B,SALR;;AAQAvC,UAAUwC,GAAV,CACE,mBADF,EAEE9B,mBAAmBgB,8BAFrB,EAGEb,eAAemB,2BAHjB,EAIEjB,gBAAgBqB,kBAJlB,EAKErB,gBAAgB0B,yBALlB,EAMEjC,MAAMkC,QANR;;AASA1C,oBACE,mBADF,EAEEU,mBAAmBgB,8BAFrB,EAGEb,eAAemB,2BAHjB,EAIEjB,gBAAgBqB,kBAJlB,EAKE5B,MAAMmC,WALR;;qBASe3C,S","file":"index.js","sourcesContent":["import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport pg from 'pg';\nimport bcrypt from 'bcrypt';\nimport {} from 'dotenv/config';\nimport queries from '../models/queries';\nimport UserController from '../controllers/users';\nimport EntryController from '../controllers/entries';\nimport DatabaseMiddleware from '../middlewares/database-middlewares';\nimport UserMidddleware from '../middlewares/user-middlewares';\nimport EntryMiddleware from '../middlewares/entry-middlewares';\n\nconst { env } = process;\nconst apiRouter = express.Router();\nconst user = new UserController(jwt, bcrypt, env, queries);\nconst entry = new EntryController(queries);\nconst databaseMiddleware = new DatabaseMiddleware(pg, env);\nconst userMiddleware = new UserMidddleware(jwt, env, queries);\nconst entryMiddleware = new EntryMiddleware(queries);\n\napiRouter.get('/', (req, res) => res.status(200).send({\n  message: 'Welcome to MyDiary app!',\n}));\n\n\napiRouter.post(\n  '/auth/signup',\n  userMiddleware.checksForSignUpRequiredFields,\n  userMiddleware.checksIfPhotoIsUploaded,\n  databaseMiddleware.handlesConnectionToTheDatabase,\n  userMiddleware.checksIfUserAlreadyExist,\n  user.postUser\n);\n\napiRouter.post(\n  '/auth/login',\n  userMiddleware.checksForLogInRequiredFields,\n  databaseMiddleware.handlesConnectionToTheDatabase,\n  userMiddleware.checksIfUserExist,\n  user.loginUser\n);\n\napiRouter.get(\n  '/user',\n  databaseMiddleware.handlesConnectionToTheDatabase,\n  userMiddleware.checksIfUserIsAuthenticated,\n  user.getAUser\n);\n\napiRouter.get(\n  '/entries',\n  databaseMiddleware.handlesConnectionToTheDatabase,\n  userMiddleware.checksIfUserIsAuthenticated,\n  entry.getAllEntries\n);\n\napiRouter.post(\n  '/entries/search',\n  databaseMiddleware.handlesConnectionToTheDatabase,\n  userMiddleware.checksIfUserIsAuthenticated,\n  entry.searchEntries\n);\n\napiRouter.get(\n  '/entries/:entryId',\n  databaseMiddleware.handlesConnectionToTheDatabase,\n  userMiddleware.checksIfUserIsAuthenticated,\n  entryMiddleware.checksIfEntryExist,\n  entry.getEntry\n);\n\napiRouter.post(\n  '/entries',\n  databaseMiddleware.handlesConnectionToTheDatabase,\n  entryMiddleware.checksForAddEntryRequiredFields,\n  userMiddleware.checksIfUserIsAuthenticated,\n  entry.postEntry\n);\n\napiRouter.put(\n  '/entries/:entryId',\n  databaseMiddleware.handlesConnectionToTheDatabase,\n  userMiddleware.checksIfUserIsAuthenticated,\n  entryMiddleware.checksIfEntryExist,\n  entryMiddleware.checksIfEntryCanBeUpdated,\n  entry.putEntry\n);\n\napiRouter.delete(\n  '/entries/:entryId',\n  databaseMiddleware.handlesConnectionToTheDatabase,\n  userMiddleware.checksIfUserIsAuthenticated,\n  entryMiddleware.checksIfEntryExist,\n  entry.deleteEntry\n);\n\n\nexport default apiRouter;\n"]}