{"version":3,"sources":["../../../server/controllers/users.js"],"names":["UserController","jwt","bcrypt","env","queries","postUser","bind","loginUser","getAUser","req","res","salt","genSaltSync","registeredUser","addUser","insertUser","on","row","push","done","status","send","success","errors","token","sign","user_id","user","SECRET_KEY","expiresIn","compareSync","body","password","trim","message","firstname","lastname","entries","getEntries","getAllEntries"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;AAUA;;;;IAIqBA,c;AACrB;;;;;;;;AAQE,0BAAYC,GAAZ,EAAiBC,MAAjB,EAAyBC,GAAzB,EAA8BC,OAA9B,EAAuC;AAAA;;AACrC,SAAKH,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKE,QAAL,GAAgB,KAAKA,QAAL,CAAcF,IAAd,CAAmB,IAAnB,CAAhB;AACD;;AAGD;;;;;;;;;;;;;;;;wBAWSG,G,EAAKC,G,EAAK;AACjB,YAAMC,OAAO,KAAKT,MAAL,CAAYU,WAAZ,CAAwB,EAAxB,CAAb;AACA,YAAMC,iBAAiB,EAAvB;AACA,YAAMC,UAAU,KAAKV,OAAL,CAAaW,UAAb,CAAwBN,GAAxB,EAA6BE,IAA7B,EAAmC,KAAKT,MAAxC,CAAhB;;AAEAY,gBAAQE,EAAR,CAAW,KAAX,EAAkB,UAACC,GAAD,EAAS;AAAEJ,yBAAeK,IAAf,CAAoBD,GAApB;AAA2B,SAAxD;AACAH,gBAAQE,EAAR,CAAW,KAAX,EAAkB,YAAM;AACtBP,cAAIU,IAAJ;AACA,cAAIL,OAAJ,EAAa;AACX,mBAAOJ,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,uBAAS,8BADiB,EACeT;AADf,aAArB,CAAP;AAGD;;AAED,iBAAOH,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BE,oBAAQ;AADkB,WAArB,CAAP;AAGD,SAXD;AAYD;;;;;AAGD;;;;;;;;;;;;;yBASUd,G,EAAKC,G,EAAK;AAClB,YAAMc,QAAQ,KAAKvB,GAAL,CAASwB,IAAT,CACZ,EAAEC,SAASjB,IAAIkB,IAAJ,CAASD,OAApB,EADY,EAEZ,KAAKvB,GAAL,CAASyB,UAFG,EAES,EAAEC,WAAW,KAAK,EAAlB,EAFT,CAAd;;AAKA,YAAI,KAAK3B,MAAL,CAAY4B,WAAZ,CAAwBrB,IAAIsB,IAAJ,CAASC,QAAT,CAAkBC,IAAlB,EAAxB,EAAkDxB,IAAIkB,IAAJ,CAASK,QAA3D,CAAJ,EAA0E;AACxEtB,cAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBa,0CAAqBzB,IAAIkB,IAAJ,CAASQ,SAA9B,iBAA2C1B,IAAIkB,IAAJ,CAASS,QAApD,CADmB,EAC6CZ;AAD7C,WAArB;AAGD,SAJD,MAIO;AACLd,cAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,QAAQ,4BAAV,EAArB;AACD;AACF;;;;;AAED;;;;;;;;;;;;;wBASSd,G,EAAKC,G,EAAK;AACjB,YAAM2B,UAAU,EAAhB;AACA,YAAMC,aAAa,KAAKlC,OAAL,CAAamC,aAAb,CAA2B9B,GAA3B,CAAnB;;AAEA6B,mBAAWtB,EAAX,CAAc,KAAd,EAAqB,UAACC,GAAD,EAAS;AAAEoB,kBAAQnB,IAAR,CAAaD,GAAb;AAAoB,SAApD;AACAR,YAAIkB,IAAJ,CAASU,OAAT,GAAmBA,OAAnB;;AAEAC,mBAAWtB,EAAX,CAAc,KAAd,EAAqB,YAAM;AACzBP,cAAIU,IAAJ;AACA,iBAAOT,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBZ,IAAIkB,IAAzB,CAAP;AACD,SAHD;AAID;;;;;;;;;qBAhGkB3B,c","file":"users.js","sourcesContent":["/**\n * @fileOverview this JS file contains logic for user's APIs logic\n *\n * @author  Victor Ukafor\n * @requires  NPM:jsonwebtoken\n * @requires  NPM:bcrypt\n * @version 1.0.0\n *\n */\n\n/**\n  *  class UserController\n  *\n  */\nexport default class UserController {\n/**\n  *  constructor\n  *  Takes 3 parameters\n  *  @param {object} jwt the first parameter\n  *  @param  {object} bcrypt the second parameter\n  *  @param  {object} env the third parameter\n  *\n  */\n  constructor(jwt, bcrypt, env, queries) {\n    this.jwt = jwt;\n    this.bcrypt = bcrypt;\n    this.env = env;\n    this.queries = queries;\n    this.postUser = this.postUser.bind(this);\n    this.loginUser = this.loginUser.bind(this);\n    this.getAUser = this.getAUser.bind(this);\n  }\n\n\n  /** An API for adding a new user:\n  *  POST: api/v1/auth/signup\n  *  Takes 2 parameters\n  *  @param {object} req the first parameter\n  *  @param  {object} res the second parameter\n  *\n  *  @returns {object} return an object\n  *\n  * The logic behind this was inspired by 'PostreSQL and NodeJS' article on 'www.mherman.com'\n  * see full link https://mherman.org/blog/2015/02/12/postgresql-and-nodejs/\n  */\n  postUser(req, res) {\n    const salt = this.bcrypt.genSaltSync(10);\n    const registeredUser = [];\n    const addUser = this.queries.insertUser(req, salt, this.bcrypt);\n\n    addUser.on('row', (row) => { registeredUser.push(row); });\n    addUser.on('end', () => {\n      req.done();\n      if (addUser) {\n        return res.status(201).send({\n          success: 'User registered successfully', registeredUser\n        });\n      }\n\n      return res.status(500).send({\n        errors: 'Server error: User could not be added!'\n      });\n    });\n  }\n\n\n  /**\n   *  An API for logging into the app\n   *  POST: /api/v1/auth/login\n   *  Takes 2 parameters\n   *  @param {object} req the first parameter\n   *  @param  {object} res the second parameter\n   *\n   *  @returns {object} return an object\n   */\n  loginUser(req, res) {\n    const token = this.jwt.sign(\n      { user_id: req.user.user_id },\n      this.env.SECRET_KEY, { expiresIn: 60 * 60 }\n    );\n\n    if (this.bcrypt.compareSync(req.body.password.trim(), req.user.password)) {\n      res.status(200).send({\n        message: `Welcome! ${req.user.firstname} ${req.user.lastname}`, token\n      });\n    } else {\n      res.status(404).send({ errors: 'Invalid email or password!' });\n    }\n  }\n\n  /**\n   *  An API for fetching a single user from the app\n   *  POST: /api/v1/user\n   *  Takes 2 parameters\n   *  @param {object} req the first parameter\n   *  @param  {object} res the second parameter\n   *\n   *  @returns {object} return an object\n   */\n  getAUser(req, res) {\n    const entries = [];\n    const getEntries = this.queries.getAllEntries(req);\n\n    getEntries.on('row', (row) => { entries.push(row); });\n    req.user.entries = entries;\n\n    getEntries.on('end', () => {\n      req.done();\n      return res.status(200).send(req.user);\n    });\n  }\n}\n"]}