{"version":3,"sources":["../../../server/controllers/entries.js"],"names":["EntryController","queries","getAllEntries","bind","searchEntries","postEntry","putEntry","deleteEntry","req","res","allEntries","allEntriesWithNoPag","page","parseInt","query","isNaN","status","send","errors","getEntries","getEntriesWithPag","getEntriesWithNoPag","on","row","push","done","length","message","total","body","search","searchEntriesWithPag","entry","title","content","substring","trim","newTitle","setTitle","newEntry","addEntry","insertEntry","success","updatedEntry","titleUpdated","setTitleForUpdate","contentUpdated","setContentForUpdate","newDate","Date","update","updateEntry"],"mappings":"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","file":"entries.js","sourcesContent":["/**\n * @fileOverview this JS file contains logic for entry's APIs logic\n *\n * @author  Victor Ukafor\n * @version 1.0.0\n *\n */\n\n/**\n  *  class EntryController\n  *\n  */\nexport default class EntryController {\n  /**\n    *  constructor\n    *\n    */\n  constructor(queries) {\n    this.queries = queries;\n    this.getAllEntries = this.getAllEntries.bind(this);\n    this.searchEntries = this.searchEntries.bind(this);\n    this.postEntry = this.postEntry.bind(this);\n    this.putEntry = this.putEntry.bind(this);\n    this.deleteEntry = this.deleteEntry.bind(this);\n  }\n\n\n  /** An API for fetching all entries:\n  *  GET: api/v1/entries\n  *  Takes 2 parameters\n  *  @param {object} req the first parameter\n  *  @param  {object} res the second parameter\n  *\n  *  @returns {object} return an object\n  *\n  * The logic behind this was inspired by 'PostreSQL and NodeJS' article on 'www.mherman.com'\n  * see full link https://mherman.org/blog/2015/02/12/postgresql-and-nodejs/\n  */\n  getAllEntries(req, res) {\n    const allEntries = [];\n    const allEntriesWithNoPag = [];\n    let page = parseInt(req.query.page, 10);\n\n    if (!req.query.page) { page = 1; }\n    if (isNaN(page) || page === 0) {\n      return res.status(400).send({\n        errors: `You've entered an invalid page: ${req.query.page}`\n      });\n    }\n\n    const getEntries = this.queries.getEntriesWithPag(req, page);\n    const getEntriesWithNoPag = this.queries.getAllEntries(req);\n\n    getEntries.on('row', (row) => { allEntries.push(row); });\n    getEntriesWithNoPag.on('row', (row) => {\n      allEntriesWithNoPag.push(row);\n    });\n\n    getEntries.on('end', () => {\n      req.done();\n      if (allEntries.length === 0) {\n        return res.status(404).send({ message: 'You have no entries yet!' });\n      }\n\n      getEntriesWithNoPag.on('end', () => {\n        req.done();\n\n        return res.status(200).send({\n          allEntries,\n          total: allEntriesWithNoPag.length\n        });\n      });\n    });\n  }\n\n\n  /** An API for searching for specific entries:\n  *  POST: api/v1/entries/search?page=pageNumber\n  *  Takes 2 parameters\n  *  @param {object} req the first parameter\n  *  @param  {object} res the second parameter\n  *\n  *  @returns {object} return an object\n  *\n  * The logic behind this was inspired by 'PostreSQL and NodeJS' article on 'www.mherman.com'\n  * see full link https://mherman.org/blog/2015/02/12/postgresql-and-nodejs/\n  */\n  searchEntries(req, res) {\n    const allEntries = [];\n    const allEntriesWithNoPag = [];\n    let page = parseInt(req.query.page, 10);\n\n    if (!req.query.page) { page = 1; }\n    if (!req.body.search) { req.body.search = ''; }\n    if (isNaN(page) || page === 0) {\n      return res.status(400).send({\n        errors: `You've entered an invalid page: ${req.query.page}`\n      });\n    }\n\n    const getEntries = this.queries.searchEntriesWithPag(req, page);\n    const getEntriesWithNoPag = this.queries.searchEntries(req);\n\n    getEntries.on('row', (row) => { allEntries.push(row); });\n    getEntriesWithNoPag.on('row', (row) => {\n      allEntriesWithNoPag.push(row);\n    });\n\n    getEntries.on('end', () => {\n      req.done();\n      if (allEntries.length === 0) {\n        return res.status(404).send({ message: 'You have no entries yet!' });\n      }\n\n      getEntriesWithNoPag.on('end', () => {\n        req.done();\n\n        return res.status(200).send({\n          allEntries,\n          total: allEntriesWithNoPag.length\n        });\n      });\n    });\n  }\n\n\n  /** An API for fetching a single entries:\n  *  GET: api/v1/entries/<entryId>\n  *  Takes 2 parameters\n  *  @param {object} req the first parameter\n  *  @param  {object} res the second parameter\n  *\n  *  @returns {object} return an object\n  */\n  getEntry(req, res) {\n    return res.status(200).send(req.entry);\n  }\n\n\n  /** method for setting the title in postEntry method\n  *  Takes 2 parameters\n  *  @param {string} title the first parameter\n  *  @param  {string} content the second parameter\n  *\n  *  @returns {string} return an string\n  */\n  setTitle(title, content) {\n    if (!title) {\n      return content.substring(0, 20);\n    }\n    return title;\n  }\n\n  /** An API for adding a new diary entry:\n  *  POST: api/v1/entries\n  *  Takes 2 parameters\n  *  @param {object} req the first parameter\n  *  @param  {object} res the second parameter\n  *\n  *  @returns {object} return an object\n  *\n  * The logic behind this was inspired by 'PostreSQL and NodeJS' article on 'www.mherman.com'\n  * see full link https://mherman.org/blog/2015/02/12/postgresql-and-nodejs/\n  */\n  postEntry(req, res) {\n    let title = '';\n    if (req.body.title) {\n      title = req.body.title.trim();\n    }\n    const content = req.body.content.trim();\n    const newTitle = this.setTitle(title, content);\n    const newEntry = [];\n    const addEntry = this.queries.insertEntry(req, newTitle, content);\n\n    addEntry.on('row', (row) => {\n      newEntry.push(row);\n    });\n\n    addEntry.on('end', () => {\n      req.done();\n      if (addEntry) {\n        return res.status(201).send({\n          success: 'A new diary entry has been added successfully', newEntry\n        });\n      }\n\n      return res.status(500).send({\n        errors: 'Server error: Entry could not be added!'\n      });\n    });\n  }\n\n  /** method for setting the title in updateEntry method\n  *  Takes 2 parameters\n  *  @param {string} title the first parameter\n  *  @param  {string} entry the second parameter\n  *\n  *  @returns {string} return an string\n  */\n  setTitleForUpdate(title, entry) {\n    if (!title) {\n      return entry.title;\n    }\n    return title;\n  }\n\n\n  /** method for setting the content in updateEntry method\n  *  Takes 2 parameters\n  *  @param {string} content the first parameter\n  *  @param  {string} entry the second parameter\n  *\n  *  @returns {string} return an string\n  */\n  setContentForUpdate(content, entry) {\n    if (!content) {\n      return entry.content;\n    }\n    return content;\n  }\n\n  /** An API for modifying diary entry:\n  *  POST: api/v1/entries/<entryId>\n  *  Takes 2 parameters\n  *  @param {object} req the first parameter\n  *  @param  {object} res the second parameter\n  *\n  *  @returns {object} return an object\n  *\n  * The logic behind this was inspired by 'PostreSQL and NodeJS' article on 'www.mherman.com'\n  * see full link https://mherman.org/blog/2015/02/12/postgresql-and-nodejs/\n  */\n  putEntry(req, res) {\n    const updatedEntry = [];\n\n    let title = '';\n    let content = '';\n\n    if (req.body.title) { title = req.body.title.trim(); }\n    if (req.body.content) { content = req.body.content.trim(); }\n\n    const titleUpdated = this.setTitleForUpdate(title, req.entry);\n    const contentUpdated = this.setContentForUpdate(content, req.entry);\n    const newDate = new Date();\n    const update = this.queries.updateEntry(req, titleUpdated, contentUpdated, newDate);\n\n    update.on('row', (row) => { updatedEntry.push(row); });\n    update.on('end', () => {\n      req.done();\n      if (update) {\n        return res.status(200).send({\n          success: 'The entry has been updated successfully', updatedEntry\n        });\n      }\n\n      return res.status(500).send({\n        errors: 'Server error: Entry could not be updated!'\n      });\n    });\n  }\n\n\n  /** An API for deleting a diary entry:\n  *  DELETE: api/v1/entries/<entryId>\n  *  Takes 2 parameters\n  *  @param {object} req the first parameter\n  *  @param  {object} res the second parameter\n  *\n  *  @returns {object} return an object\n  *\n  * The logic behind this was inspired by 'PostreSQL and NodeJS' article on 'www.mherman.com'\n  * see full link https://mherman.org/blog/2015/02/12/postgresql-and-nodejs/\n  */\n  deleteEntry(req, res) {\n    const deleteEntry = this.queries.deleteEntry(req);\n\n    if (deleteEntry) {\n      return res.status(200).send({\n        success: 'The entry has been deleted successfully'\n      });\n    }\n\n    return res.status(500).send({\n      errors: 'Server error: Entry could not be deleted!'\n    });\n  }\n}\n"]}