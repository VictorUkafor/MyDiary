{"version":3,"sources":["../../../server/middlewares/database-middlewares.js"],"names":["DatabaseMiddleware","pg","env","handlesConnectionToTheDatabase","bind","req","res","next","connectionString","DATABASE_DEV_URL","NODE_ENV","DATABASE_TEST_URL","DATABASE_PRO_URL","pool","Pool","connect","err","client","done","status","send","errorMessage"],"mappings":";;;;;;;;;;AAAA;;;;;;;;AASA;;;;IAIqBA,kB;AACnB;;;;;;;AAOA,8BAAYC,EAAZ,EAAgBC,GAAhB,EAAqB;AAAA;;AACnB,SAAKD,EAAL,GAAUA,EAAV;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,8BAAL,GAAsC,KAAKA,8BAAL,CAAoCC,IAApC,CAAyC,IAAzC,CAAtC;AACD;;AAGD;;;;;;;;;;;;;;;8CAU+BC,G,EAAKC,G,EAAKC,I,EAAM;AAC7C,YAAIC,mBAAmB,KAAKN,GAAL,CAASO,gBAAhC;AACA,YAAI,KAAKP,GAAL,CAASQ,QAAT,KAAsB,MAA1B,EAAkC;AAChCF,6BAAmB,KAAKN,GAAL,CAASS,iBAA5B;AACD;;AAED,YAAI,KAAKT,GAAL,CAASQ,QAAT,KAAsB,YAA1B,EAAwC;AACtCF,6BAAmB,KAAKN,GAAL,CAASU,gBAA5B;AACD;;AAED,YAAMC,OAAO,IAAI,KAAKZ,EAAL,CAAQa,IAAZ,CAAiB,EAAEN,kCAAF,EAAjB,CAAb;;AAEAK,aAAKE,OAAL,CAAa,UAACC,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAuB;AAClC,cAAIF,GAAJ,EAAS;AACPE;AACA,mBAAOZ,IAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,4BAAc;AADY,aAArB,CAAP;AAGD;;AAEDhB,cAAIY,MAAJ,GAAaA,MAAb;AACAZ,cAAIa,IAAJ,GAAWA,IAAX;AACAX;AACD,SAXD;AAYD;;;;;;;;;qBAjDkBP,kB","file":"database-middlewares.js","sourcesContent":["/**\n * @fileOverview this JS file contains logic for database middleware methods\n *\n * @author  Victor Ukafor\n * @version 1.0.0\n *\n */\n\n\n/**\n  *  class DatabaseMiddleware\n  *\n  */\nexport default class DatabaseMiddleware {\n  /**\n    *  constructor\n    *  Takes 2 parameters\n    *  @param  {object} pg the first parameter\n    * @param  {object} env the second parameter\n    *\n    */\n  constructor(pg, env) {\n    this.pg = pg;\n    this.env = env;\n    this.handlesConnectionToTheDatabase = this.handlesConnectionToTheDatabase.bind(this);\n  }\n\n\n  /** A middleware method for setting up connection to database\n      *  Takes 3 parameters\n      *  @param {object} req the first parameter\n      *  @param  {object} res the second parameter\n      *  @param  {object} next the third parameter\n      *  @returns {object} return an object\n      *\n      * The logic behind this was inspired by 'PostreSQL and NodeJS' article on 'www.mherman.com'\n      * see full link https://mherman.org/blog/2015/02/12/postgresql-and-nodejs/\n      */\n  handlesConnectionToTheDatabase(req, res, next) {\n    let connectionString = this.env.DATABASE_DEV_URL;\n    if (this.env.NODE_ENV === 'test') {\n      connectionString = this.env.DATABASE_TEST_URL;\n    }\n\n    if (this.env.NODE_ENV === 'production') {\n      connectionString = this.env.DATABASE_PRO_URL;\n    }\n\n    const pool = new this.pg.Pool({ connectionString });\n\n    pool.connect((err, client, done) => {\n      if (err) {\n        done();\n        return res.status(500).send({\n          errorMessage: 'Internal server error'\n        });\n      }\n\n      req.client = client;\n      req.done = done;\n      next();\n    });\n  }\n}\n"]}