{"version":3,"sources":["../../../server/middlewares/entry-middlewares.js"],"names":["EntryMiddleware","queries","checksIfEntryExist","bind","req","res","next","body","content","trim","status","send","errors","entry","entryId","parseInt","params","isNaN","getEntry","getAnEntry","on","row","push","done","length","twentyFourHoursInMins","timeNow","Date","timeDifferences","created_at","timeDifferencesInMins"],"mappings":";;;;;;;;;;AAAA;;;;;;;;AAQA;;;;IAIqBA,e;AACnB;;;;AAIA,2BAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACD;;AAED;;;;;;;;;;;;+CAOgCC,G,EAAKC,G,EAAKC,I,EAAM;AAC9C,YAAI,CAACF,IAAIG,IAAJ,CAASC,OAAV,IAAqBJ,IAAIG,IAAJ,CAASC,OAAT,CAAiBC,IAAjB,OAA4B,CAArD,EAAwD;AACtD,iBAAOJ,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,oBAAQ;AADkB,WAArB,CAAP;AAGD;AACDN;AACD;;;;;AAGD;;;;;;;;;;;;;;;kCAWmBF,G,EAAKC,G,EAAKC,I,EAAM;AACjC,YAAMO,QAAQ,EAAd;AACA,YAAMC,UAAUC,SAASX,IAAIY,MAAJ,CAAWF,OAApB,EAA6B,EAA7B,CAAhB;;AAEA,YAAIG,MAAMH,OAAN,CAAJ,EAAoB;AAClB,iBAAOT,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,oEAA8CR,IAAIY,MAAJ,CAAWF,OAAzD;AAD0B,WAArB,CAAP;AAGD;AACD,YAAMI,WAAW,KAAKjB,OAAL,CAAakB,UAAb,CAAwBf,GAAxB,CAAjB;;AAEAc,iBAASE,EAAT,CAAY,KAAZ,EAAmB,UAACC,GAAD,EAAS;AAAER,gBAAMS,IAAN,CAAWD,GAAX;AAAkB,SAAhD;;AAEAH,iBAASE,EAAT,CAAY,KAAZ,EAAmB,YAAM;AACvBhB,cAAImB,IAAJ;AACA,cAAIV,MAAMW,MAAN,KAAiB,CAArB,EAAwB;AACtB,mBAAOnB,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,QAAQ,yBAAV,EAArB,CAAP;AACD;;AAEDR,cAAIS,KAAJ,GAAYA,MAAM,CAAN,CAAZ;AACAP;AACD,SARD;AASD;;;;;AAGD;;;;;;;;;;;;;;;yCAW0BF,G,EAAKC,G,EAAKC,I,EAAM;AACxC,YAAMmB,wBAAwB,KAAK,EAAnC;AACA,YAAMC,UAAU,IAAIC,IAAJ,EAAhB;AACA,YAAMC,kBAAkBF,UAAUtB,IAAIS,KAAJ,CAAUgB,UAA5C;AACA,YAAMC,wBAAwBF,kBAAkB,KAAhD;;AAEA,YAAIE,wBAAwBL,qBAA5B,EAAmD;AACjD,iBAAOpB,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,oBAAQ;AADkB,WAArB,CAAP;AAGD;;AAEDN;AACD;;;;;;;;;qBAvFkBN,e","file":"entry-middlewares.js","sourcesContent":["/**\n * @fileOverview this JS file contains logic for entry middleware methods\n *\n * @author  Victor Ukafor\n * @version 1.0.0\n *\n */\n\n/**\n  *  class EntryMiddleware\n  *\n  */\nexport default class EntryMiddleware {\n  /**\n    *  constructor\n    *\n    */\n  constructor(queries) {\n    this.queries = queries;\n    this.checksIfEntryExist = this.checksIfEntryExist.bind(this);\n  }\n\n  /** A middleware method for checking if required field for add entry is filled\n      *  Takes 3 parameters\n      *  @param {object} req the first parameter\n      *  @param  {object} res the second parameter\n      *  @param  {object} next the third parameter\n      *  @returns {object} return an object\n      */\n  checksForAddEntryRequiredFields(req, res, next) {\n    if (!req.body.content || req.body.content.trim() === 0) {\n      return res.status(400).send({\n        errors: 'Content field is required!'\n      });\n    }\n    next();\n  }\n\n\n  /**\n   * A middleware method for checking if an entry exist\n   * Takes req and res to return the user object\n   * @param {object} req the request object\n   * @param {object} res the response object\n   * @param {object} next the next object\n   * @returns {object} the user object\n   *\n   * The logic behind this was inspired by 'PostreSQL and NodeJS' article on 'www.mherman.com'\n   * see full link https://mherman.org/blog/2015/02/12/postgresql-and-nodejs/\n   */\n  checksIfEntryExist(req, res, next) {\n    const entry = [];\n    const entryId = parseInt(req.params.entryId, 10);\n\n    if (isNaN(entryId)) {\n      return res.status(400).send({\n        errors: `You've entered an invalid entryId: ${req.params.entryId}`\n      });\n    }\n    const getEntry = this.queries.getAnEntry(req);\n\n    getEntry.on('row', (row) => { entry.push(row); });\n\n    getEntry.on('end', () => {\n      req.done();\n      if (entry.length === 0) {\n        return res.status(404).send({ errors: 'Entry can not be found!' });\n      }\n\n      req.entry = entry[0];\n      next();\n    });\n  }\n\n\n  /**\n   * A middleware method for checking if an entry can be updated\n   * Takes req and res to return the user object\n   * @param {object} req the request object\n   * @param {object} res the response object\n   * @param {object} next the next object\n   * @returns {object} the user object\n   *\n   * The logic behind this was inspired by 'PostreSQL and NodeJS' article on 'www.mherman.com'\n   * see full link https://mherman.org/blog/2015/02/12/postgresql-and-nodejs/\n   */\n  checksIfEntryCanBeUpdated(req, res, next) {\n    const twentyFourHoursInMins = 24 * 60;\n    const timeNow = new Date();\n    const timeDifferences = timeNow - req.entry.created_at;\n    const timeDifferencesInMins = timeDifferences / 60000;\n\n    if (timeDifferencesInMins > twentyFourHoursInMins) {\n      return res.status(500).send({\n        errors: 'Entries can only be Updated within 24 hours of creation!'\n      });\n    }\n\n    next();\n  }\n}\n"]}