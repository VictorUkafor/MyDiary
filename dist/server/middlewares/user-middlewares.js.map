{"version":3,"sources":["../../../server/middlewares/user-middlewares.js"],"names":["UserMiddleware","jwt","env","queries","emailFormat","checksIfUserAlreadyExist","bind","checksIfUserExist","checksForSignUpRequiredFields","checksForLogInRequiredFields","checksIfUserIsAuthenticated","req","res","next","registeredUser","User","getAUser","on","row","push","done","length","status","send","errors","field","fieldName","body","trim","email","test","fieldIsEmpty","emailIsValid","password","confirm_password","Object","keys","authenticatedUser","user","files","photograph","mimetype","mv","name","err","token","query","headers","authentication","authenticated","verify","SECRET_KEY","getUser","getAUserById","message"],"mappings":"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","file":"user-middlewares.js","sourcesContent":["/**\n * @fileOverview this JS file contains logic for user middleware methods\n *\n * @author  Victor Ukafor\n * @requires  NPM:jsonwebtoken\n * @version 1.0.0\n *\n */\n\n/**\n  *  class UserMiddleware\n  *\n  */\nexport default class UserMiddleware {\n  /**\n      *  constructor\n      *  Takes 2 parameters\n      *  @param {object} jwt the first parameter\n      *  @param  {object} env the second parameter\n      *\n      */\n  constructor(jwt, env, queries) {\n    this.jwt = jwt;\n    this.env = env;\n    this.queries = queries;\n\n    // The regular expression used here is a code snippet from  stackoverflow.com. I'm yet\n    // to fully understand regular expression in javascript. See the full link below\n    // \"https://stackoverflow.com/questions/940577/javascript-regular-expression-email-validation?lq=1\"\n    this.emailFormat = /^[\\w._-]+[+]?[\\w._-]+@[\\w.-]+\\.[a-zA-Z]{2,6}$/;\n    this.checksIfUserAlreadyExist = this.checksIfUserAlreadyExist.bind(this);\n    this.checksIfUserExist = this.checksIfUserExist.bind(this);\n    this.checksForSignUpRequiredFields = this.checksForSignUpRequiredFields.bind(this);\n    this.checksForLogInRequiredFields = this.checksForLogInRequiredFields.bind(this);\n    this.checksIfUserIsAuthenticated = this.checksIfUserIsAuthenticated.bind(this);\n  }\n\n  /** A middleware method for checking if user already exist\n        *  Takes 3 parameters\n        *  @param {object} req the first parameter\n        *  @param  {object} res the second parameter\n        *  @param  {object} next the third parameter\n        *  @returns {object} return an object\n        *\n        * The logic behind this was inspired by 'PostreSQL and NodeJS' article on 'www.mherman.com'\n        * see full link https://mherman.org/blog/2015/02/12/postgresql-and-nodejs/\n        */\n  checksIfUserAlreadyExist(req, res, next) {\n    const registeredUser = [];\n    const User = this.queries.getAUser(req);\n\n    User.on('row', (row) => { registeredUser.push(row); });\n\n    User.on('end', () => {\n      req.done();\n      if (registeredUser.length > 0) {\n        return res.status(409).send({ errors: 'An account with this email has already been created!' });\n      }\n      next();\n    });\n  }\n\n  /** A middleware method for checking  if login required fields are filled\n    *  Takes 3 parameters\n    *  @param {object} req the first parameter\n    *  @param  {object} errors the second parameter\n    *  @param  {string} field the third parameter\n    *  @param  {string} fieldName the fourth parameter\n    *  @returns {object} return an object\n    */\n  fieldIsEmpty(req, errors, field, fieldName) {\n    if (!req.body[field] || req.body[field].trim() === 0) {\n      errors[field] = `${fieldName} field is required`;\n    }\n  }\n\n\n  /** A middleware method for checking  if login required fields are filled\n  *  Takes 3 parameters\n  *  @param {object} req the first parameter\n  *  @param  {object} errors the second parameter\n  *  @returns {object} return an object\n  */\n  emailIsValid(req, errors) {\n    if (req.body.email) {\n      if (!this.emailFormat.test(req.body.email.trim())) {\n        errors.email = 'You\\'ve entered an invalid email';\n      }\n    }\n  }\n\n\n  /** A method for checking if required fields are filled for signup API\n        *  Takes 3 parameters\n        *  @param {object} req the first parameter\n        *  @param  {object} res the second parameter\n        *  @param  {object} next the third parameter\n        *  @returns {object} return an object\n        */\n  checksForSignUpRequiredFields(req, res, next) {\n    const errors = {};\n\n    this.fieldIsEmpty(req, errors, 'firstName', 'First Name');\n    this.fieldIsEmpty(req, errors, 'lastName', 'Last Name');\n    this.fieldIsEmpty(req, errors, 'email', 'Email');\n    this.fieldIsEmpty(req, errors, 'password', 'Password');\n    this.fieldIsEmpty(req, errors, 'confirm_password', 'Confirm Password');\n    this.emailIsValid(req, errors);\n\n    if (req.body.password && req.body.confirm_password) {\n      if (req.body.password.trim() !== req.body.confirm_password.trim()) {\n        errors.confirm_password = 'Passwords do not match';\n      }\n    }\n\n\n    if (Object.keys(errors).length > 0) {\n      return res.status(400).send({ errors: 'All fields must be filled' });\n    }\n    next();\n  }\n\n\n  /** A method for checking if user exist\n        *  Takes 3 parameters\n        *  @param {object} req the first parameter\n        *  @param  {object} res the second parameter\n        *  @param  {object} next the third parameter\n        *  @returns {object} return an object\n        *\n        * The logic behind this was inspired by 'PostreSQL and NodeJS' article on 'www.mherman.com'\n        * see full link https://mherman.org/blog/2015/02/12/postgresql-and-nodejs/\n        */\n  checksIfUserExist(req, res, next) {\n    const authenticatedUser = [];\n    const User = this.queries.getAUser(req);\n\n    User.on('row', (row) => { authenticatedUser.push(row); });\n\n    User.on('end', () => {\n      req.done();\n      if (authenticatedUser.length === 0) {\n        return res.status(404).send({ errors: 'Invalid email or password!' });\n      }\n\n      req.user = authenticatedUser[0];\n      next();\n    });\n  }\n\n  /** A middleware method for checking  if login required fields are filled\n          *  Takes 3 parameters\n          *  @param {object} req the first parameter\n          *  @param  {object} res the second parameter\n          *  @param  {object} next the third parameter\n          *  @returns {object} return an object\n          */\n  checksForLogInRequiredFields(req, res, next) {\n    const errors = {};\n\n    this.fieldIsEmpty(req, errors, 'email', 'Email');\n    this.fieldIsEmpty(req, errors, 'password', 'Password');\n    this.emailIsValid(req, errors);\n\n    if (Object.keys(errors).length > 0) {\n      res.status(400).send({ errors: 'Both fields must be filled' });\n    } else {\n      next();\n    }\n  }\n\n\n  /**\n   *  A middleware method for checking  if login required fields are filled\n   * Takes 3 parameters\n   *  @param {object} req the first parameter\n   *  @param  {object} res the second parameter\n   *  @param  {object} next the third parameter\n   *  @returns {object} return an object\n   */\n  checksIfPhotoIsUploaded(req, res, next) {\n    if (!req.files) {\n      next();\n    } else {\n      if (req.files.photograph.mimetype !== 'image/jpeg' &&\n       req.files.photograph.mimetype !== 'image/png' &&\n       req.files.photograph.mimetype !== 'image/gif') {\n        return res.status(400).send({ errors: 'Uploaded file must be an image type of png, jpg or gif' });\n      }\n      const photograph = req.files.photograph;\n      photograph.mv(`./client/images/users/${photograph.name}`, (err) => {\n        if (err) {\n          return res.status(500).send({ errors: 'Server error! Photograph can not be saved' });\n        }\n\n        next();\n      });\n    }\n  }\n\n\n  /**\n     * A middleware method for checking if user is authenticated\n     * Takes req and res to return the user object\n     * @param {object} req the request object\n     * @param {object} res the response object\n     * @param {object} next the next object\n     * @returns {object} the user object\n     *\n     * The logic behind this was inspired by 'PostreSQL and NodeJS' article on 'www.mherman.com'\n     * see full link https://mherman.org/blog/2015/02/12/postgresql-and-nodejs/\n     */\n  checksIfUserIsAuthenticated(req, res, next) {\n    const token = req.body.token || req.query.token || req.headers.authentication;\n    const authenticatedUser = [];\n\n    if (!token) {\n      return res.status(401).send({\n        authenticated: false, errors: 'You are not registered user!'\n      });\n    }\n\n    this.jwt.verify(token, this.env.SECRET_KEY, (err, authenticated) => {\n      if (!authenticated) {\n        return res.status(401).send({\n          authenticated: false, errors: 'You are not registered user!'\n        });\n      }\n\n      const getUser = this.queries.getAUserById(req, authenticated);\n\n      getUser.on('row', (row) => { authenticatedUser.push(row); });\n\n      getUser.on('end', () => {\n        req.done();\n        if (authenticatedUser.length === 0) {\n          return res.status(404).send({ message: 'User can not be found!' });\n        }\n\n        req.user = authenticatedUser[0];\n        next();\n      });\n    });\n  }\n}\n\n"]}