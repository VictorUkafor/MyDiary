{"version":3,"sources":["../../../server/middlewares/user-middlewares.js"],"names":["UserMiddleware","jwt","env","queries","emailFormat","checksIfUserAlreadyExist","bind","checksIfUserExist","checksForSignUpRequiredFields","checksForLogInRequiredFields","checksIfUserIsAuthenticated","req","res","next","registeredUser","User","getAUser","on","row","push","done","length","status","send","errorMessage","errors","input","field","label","trim","test","email","mimetype","photograph","body","firstName","lastName","password","confirmPassword","fieldValidation","Object","keys","authenticatedUser","user","files","mv","name","err","token","query","headers","authentication","authenticated","verify","SECRET_KEY","getUser","getAUserById"],"mappings":"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","file":"user-middlewares.js","sourcesContent":["/**\n * @fileOverview this JS file contains logic for user middleware methods\n *\n * @author  Victor Ukafor\n * @requires  NPM:jsonwebtoken\n * @version 1.0.0\n *\n */\n\n/**\n  *  class UserMiddleware\n  *\n  */\nexport default class UserMiddleware {\n  /**\n      *  constructor\n      *  Takes 2 parameters\n      *  @param {object} jwt the first parameter\n      *  @param  {object} env the second parameter\n      *  @param  {object} queries the third parameter\n      *\n      */\n  constructor(jwt, env, queries) {\n    this.jwt = jwt;\n    this.env = env;\n    this.queries = queries;\n\n    // The regular expression used here is a code snippet from  stackoverflow.com. I'm yet\n    // to fully understand regular expression in javascript. See the full link below\n    // \"https://stackoverflow.com/questions/940577/javascript-regular-expression-email-validation?lq=1\"\n    this.emailFormat = /^[\\w._-]+[+]?[\\w._-]+@[\\w.-]+\\.[a-zA-Z]{2,6}$/;\n    this.checksIfUserAlreadyExist = this.checksIfUserAlreadyExist.bind(this);\n    this.checksIfUserExist = this.checksIfUserExist.bind(this);\n    this.checksForSignUpRequiredFields = this.checksForSignUpRequiredFields.bind(this);\n    this.checksForLogInRequiredFields = this.checksForLogInRequiredFields.bind(this);\n    this.checksIfUserIsAuthenticated = this.checksIfUserIsAuthenticated.bind(this);\n  }\n\n  /** A middleware method for checking if user already exist\n        *  Takes 3 parameters\n        *  @param {object} req the first parameter\n        *  @param  {object} res the second parameter\n        *  @param  {object} next the third parameter\n        *  @returns {object} return an object\n        *\n        * The logic behind this was inspired by 'PostreSQL and NodeJS' article on 'www.mherman.com'\n        * see full link https://mherman.org/blog/2015/02/12/postgresql-and-nodejs/\n        */\n  checksIfUserAlreadyExist(req, res, next) {\n    const registeredUser = [];\n    const User = this.queries.getAUser(req);\n\n    User.on('row', (row) => { registeredUser.push(row); });\n\n    User.on('end', () => {\n      req.done();\n      if (registeredUser.length > 0) {\n        return res.status(409).send({\n          errorMessage: 'An account with this email has already been created'\n        });\n      }\n      next();\n    });\n  }\n\n  /** A middleware method for checking  if login required fields are filled\n    *  Takes 3 parameters\n    *  @param {object} errors the first parameter\n    *  @param  {string} input the second parameter\n    *  @param  {string} field the third parameter\n    *  @param  {string} label the fourth parameter\n    *  @returns {object} return an object\n    */\n  fieldValidation(errors, input, field, label) {\n    if (field !== 'photograph' && label !== 'Photograph') {\n      if (!input || input.trim() === 0) {\n        errors[field] = `${label} field is required`;\n      }\n    }\n\n    if (input && field === 'email' && label === 'Email') {\n      if (!this.emailFormat.test(input.trim())) {\n        errors.email = 'You\\'ve entered an invalid email';\n      }\n    }\n\n    if (input && field === 'photograph' && label === 'Photograph') {\n      if (input.mimetype !== 'image/jpeg' &&\n      input.mimetype !== 'image/png' &&\n      input.mimetype !== 'image/gif') {\n        errors.photograph = 'Uploaded file must be an image type of png, jpg or gif';\n      }\n    }\n  }\n\n\n  /** A method for checking if required fields are filled for signup API\n        *  Takes 3 parameters\n        *  @param {object} req the first parameter\n        *  @param  {object} res the second parameter\n        *  @param  {object} next the third parameter\n        *  @returns {object} return an object\n        */\n  checksForSignUpRequiredFields(req, res, next) {\n    const errors = {};\n    const {\n      firstName, lastName, email, password, confirmPassword\n    } = req.body;\n\n    this.fieldValidation(errors, firstName, 'firstName', 'First Name');\n    this.fieldValidation(errors, lastName, 'lastName', 'Last Name');\n    this.fieldValidation(errors, email, 'email', 'Email');\n    this.fieldValidation(errors, password, 'password', 'Password');\n    this.fieldValidation(errors, confirmPassword, 'confirmPassword', 'Confirm Password');\n\n    if (password && confirmPassword) {\n      if (password.trim() !== confirmPassword.trim()) {\n        errors.confirmPassword = 'Passwords do not match';\n      }\n    }\n\n\n    if (Object.keys(errors).length > 0) {\n      return res.status(400).send({ errors });\n    }\n    next();\n  }\n\n\n  /** A method for checking if user exist\n        *  Takes 3 parameters\n        *  @param {object} req the first parameter\n        *  @param  {object} res the second parameter\n        *  @param  {object} next the third parameter\n        *  @returns {object} return an object\n        *\n        * The logic behind this was inspired by 'PostreSQL and NodeJS' article on 'www.mherman.com'\n        * see full link https://mherman.org/blog/2015/02/12/postgresql-and-nodejs/\n        */\n  checksIfUserExist(req, res, next) {\n    const authenticatedUser = [];\n    const User = this.queries.getAUser(req);\n\n    User.on('row', (row) => { authenticatedUser.push(row); });\n\n    User.on('end', () => {\n      req.done();\n      if (authenticatedUser.length === 0) {\n        return res.status(404).send({ errorMessage: 'Invalid email or password' });\n      }\n\n      const [user] = authenticatedUser;\n      req.user = user;\n      next();\n    });\n  }\n\n  /** A middleware method for checking  if login required fields are filled\n          *  Takes 3 parameters\n          *  @param {object} req the first parameter\n          *  @param  {object} res the second parameter\n          *  @param  {object} next the third parameter\n          *  @returns {object} return an object\n          */\n  checksForLogInRequiredFields(req, res, next) {\n    const errors = {};\n    const { email, password } = req.body;\n\n    this.fieldValidation(errors, email, 'email', 'Email');\n    this.fieldValidation(errors, password, 'password', 'Password');\n\n    if (Object.keys(errors).length > 0) {\n      res.status(400).send({ errors });\n    } else {\n      next();\n    }\n  }\n\n\n  /**\n   *  A middleware method for checking  if login required fields are filled\n   * Takes 3 parameters\n   *  @param {object} req the first parameter\n   *  @param  {object} res the second parameter\n   *  @param  {object} next the third parameter\n   *  @returns {object} return an object\n   */\n  checksIfPhotoIsUploaded(req, res, next) {\n    const errors = {};\n    if (!req.files) {\n      next();\n    } else {\n      const { photograph } = req.files;\n      this.fieldValidation(errors, photograph, 'photograph', 'Photograph');\n      if (Object.keys(errors).length > 0) {\n        res.status(400).send({ errors });\n      } else {\n        photograph.mv(`./uploads/users/${photograph.name}`, (err) => {\n          if (err) {\n            return res.status(500).send({\n              errorMessage: 'Internal server error'\n            });\n          }\n\n          next();\n        });\n      }\n    }\n  }\n\n\n  /**\n     * A middleware method for checking if user is authenticated\n     * Takes req and res to return the user object\n     * @param {object} req the request object\n     * @param {object} res the response object\n     * @param {object} next the next object\n     * @returns {object} the user object\n     *\n     * The logic behind this was inspired by 'PostreSQL and NodeJS' article on 'www.mherman.com'\n     * see full link https://mherman.org/blog/2015/02/12/postgresql-and-nodejs/\n     */\n  checksIfUserIsAuthenticated(req, res, next) {\n    const token = req.body.token || req.query.token || req.headers.authentication;\n    const authenticatedUser = [];\n\n    if (!token) {\n      return res.status(401).send({\n        authenticated: false, errorMessage: 'You are not registered user'\n      });\n    }\n\n    this.jwt.verify(token, this.env.SECRET_KEY, (err, authenticated) => {\n      if (!authenticated) {\n        return res.status(401).send({\n          authenticated: false, errorMessage: 'You are not registered user'\n        });\n      }\n\n      const getUser = this.queries.getAUserById(req, authenticated);\n\n      getUser.on('row', (row) => { authenticatedUser.push(row); });\n\n      getUser.on('end', () => {\n        req.done();\n        if (authenticatedUser.length === 0) {\n          return res.status(404).send({ errorMessage: 'User can not be found' });\n        }\n\n        const [user] = authenticatedUser;\n        req.user = user;\n        next();\n      });\n    });\n  }\n}\n\n"]}